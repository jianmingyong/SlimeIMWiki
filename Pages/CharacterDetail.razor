@page "/characters/{permalink}"

@using BattleUnit = SlimeIMWiki.Models.BattleUnit
@using ProtectionUnit = SlimeIMWiki.Models.ProtectionUnit

@inject DataModel DataModel
@inject NavigationManager NavigationManager

<PageTitle>@GetPageTitle()</PageTitle>

<Grid>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
        <Image Source="@GetLargeThumbnailImage()" Fluid></Image>
    </Column>

    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile" Position="Position.Relative">
        <Div TextColor="TextColor.Body" TextWeight="TextWeight.SemiBold"
             TextAlignment="TextAlignment.Center">@GetUnitTitle()</Div>
        <Div TextColor="TextColor.Body" TextWeight="TextWeight.SemiBold"
             TextAlignment="TextAlignment.Center">@GetUnitName()</Div>

        <Divider DividerType="DividerType.TextContent" Margin="Margin.Is4.OnY" Text="STATS"></Divider>

        <Table Background="Background.Body">
            <TableBody>
                <TableRow>
                    <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body">
                        <Div Width="Width.Px(32)" Height="Height.Px(32)" Display="Display.InlineBlock">
                            <Image Position="Position.Relative.Start.Is50.Top.Is50.Translate.Middle"
                                   Source="image/character_info/icHp.png"></Image>
                        </Div>
                        <Div Display="Display.InlineBlock" VerticalAlignment="VerticalAlignment.Middle">Health</Div>
                    </TableHeaderCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center" Width="Width.Is33">
                        @(GetUnitMinAttack() ?? 0)
                    </TableRowCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">
                        @(GetUnitMaxAttack())
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body">
                        <Div Width="Width.Px(32)" Height="Height.Px(32)" Display="Display.InlineBlock">
                            <Image Position="Position.Relative.Start.Is50.Top.Is50.Translate.Middle"
                                   Source="image/character_info/icAtk.png"></Image>
                        </Div>
                        <Div Display="Display.InlineBlock" VerticalAlignment="VerticalAlignment.Middle">Attack</Div>
                    </TableHeaderCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body">
                        <Div Width="Width.Px(32)" Height="Height.Px(32)" Display="Display.InlineBlock">
                            <Image Position="Position.Relative.Start.Is50.Top.Is50.Translate.Middle"
                                   Source="image/character_info/icDef.png"></Image>
                        </Div>
                        <Div Display="Display.InlineBlock" VerticalAlignment="VerticalAlignment.Middle">Defense</Div>
                    </TableHeaderCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body">
                        <Div Width="Width.Px(32)" Height="Height.Px(32)" Display="Display.InlineBlock">
                            <Image Position="Position.Relative.Start.Is50.Top.Is50.Translate.Middle"
                                   Source="image/character_info/icConstruct.png"></Image>
                        </Div>
                        <Div Display="Display.InlineBlock" VerticalAlignment="VerticalAlignment.Middle">Output</Div>
                    </TableHeaderCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  Width="Width.Is33">0
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body">
                        <Div Display="Display.InlineBlock" VerticalAlignment="VerticalAlignment.Middle">Release</Div>
                    </TableHeaderCell>
                    <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                  TextAlignment="TextAlignment.Center"
                                  ColumnSpan="2">@GetUnitReleaseDate()</TableRowCell>
                </TableRow>
            </TableBody>
        </Table>

        <Divider DividerType="DividerType.TextContent" Margin="Margin.Is4.OnY" Text="FORCES"></Divider>

        <Div Background="Background.Dark" Padding="Padding.Is2" Flex="Flex.Wrap" Gap="Gap.Is1">
            @foreach (var force in GetUnitForces())
            {
                <Div Background="Background.Body" Height="Height.Px(42)" Padding="Padding.Is2.OnX.Is1.OnY"
                     Border="Border.Rounded">
                    <Image Position="Position.Relative.Top.Is50.Translate.MiddleY" Height="Height.Is100"
                           Source="@DataModel.GetForce(force)!.Icon"></Image>
                    <Span TextSize="TextSize.Small" TextColor="TextColor.Body"
                          VerticalAlignment="VerticalAlignment.Middle">@force</Span>
                </Div>
            }
        </Div>

        <Divider DividerType="DividerType.TextContent" Margin="Margin.Is4.OnY" Text="TAGS"></Divider>

        <Div>There is something here</Div>

    </Column>
</Grid>

<Grid>
    <Row>
        <Divider DividerType="DividerType.TextContent" Margin="Margin.Is4.OnY" Text="DIVINE PROTECTION"></Divider>
    </Row>
</Grid>

@code
{
    [Parameter]
    public required string Permalink { get; set; }

    private BattleUnit? BattleUnit { get; set; }

    private ProtectionUnit? ProtectionUnit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await DataModel.LoadDataModelAsync();

        BattleUnit = DataModel.BattleUnits.FirstOrDefault(unit => unit.Permalink.Equals(Permalink, StringComparison.OrdinalIgnoreCase));
        ProtectionUnit = DataModel.ProtectionUnits.FirstOrDefault(unit => unit.Permalink.Equals(Permalink, StringComparison.OrdinalIgnoreCase));

        if (BattleUnit == null && ProtectionUnit == null)
        {
            NavigationManager.NavigateTo("404");
        }
    }

    private string GetPageTitle()
    {
        if (BattleUnit != null) return $"{BattleUnit.Name} [{BattleUnit.Title}]";
        return ProtectionUnit != null ? $"{ProtectionUnit.Name} [{ProtectionUnit.Title}]" : string.Empty;
    }

    private string GetLargeThumbnailImage()
    {
        if (BattleUnit != null) return BattleUnit.Image;
        return ProtectionUnit != null ? ProtectionUnit.Image : string.Empty;
    }

    private string GetUnitTitle()
    {
        if (BattleUnit != null) return $"[ {BattleUnit.Title} ]";
        return ProtectionUnit != null ? $"[ {ProtectionUnit.Title} ]" : string.Empty;
    }

    private string GetUnitName()
    {
        if (BattleUnit != null) return BattleUnit.Name;
        return ProtectionUnit != null ? ProtectionUnit.Name : string.Empty;
    }

    private int? GetUnitMinAttack()
    {
        if (BattleUnit != null) return BattleUnit.MinAttack;
        return ProtectionUnit != null ? ProtectionUnit.MinAttack : 0;
    }

    private int GetUnitMaxAttack()
    {
        if (BattleUnit != null) return BattleUnit.MaxAttack;
        return ProtectionUnit?.MaxAttack ?? 0;
    }

    private DateOnly? GetUnitReleaseDate()
    {
        if (BattleUnit != null) return BattleUnit.ReleaseDate;
        return ProtectionUnit?.ReleaseDate ?? DateOnly.MinValue;
    }

    private string[] GetUnitForces()
    {
        if (BattleUnit != null) return BattleUnit.Forces;
        return ProtectionUnit != null ? ProtectionUnit.Forces ?? [] : [];
    }
}
