@page "/characters/{permalink}"
@using SlimeIMWiki.ViewModels.CharacterDetail
@inherits ReactiveComponentBase<SlimeIMWiki.ViewModels.CharacterDetail.CharacterDetailViewModel>
@inject IServiceProvider ServiceProvider

@{ Debug.Assert(ViewModel != null, nameof(ViewModel) + " != null"); }

@if (ViewModel.Unit is null)
{
    <Div Flex="Flex.JustifyContent.Center.AlignContent.Center">
        There is no such character. Perhaps you have spelled incorrectly?
    </Div>
}
else
{
    <Grid>
        <Column ColumnSize="ColumnSize.Is12" Display="Display.None.OnDesktop">
            <Div TextWeight="TextWeight.SemiBold" TextAlignment="TextAlignment.Center">[ @ViewModel.Unit.Title ]</Div>
            <Div TextWeight="TextWeight.SemiBold" TextAlignment="TextAlignment.Center">@ViewModel.Unit.Name</Div>

            <Div Position="Position.Relative.Start.Is50.Translate.MiddleX" Style="width: fit-content"
                 Flex="Flex.AlignItems.Center" Gap="Gap.Is1" Padding="Padding.Is2.FromTop">
                @switch (ViewModel.Unit)
                {
                    case ProtectionUnit:
                    {
                        <Image Width="Width.Em(2)" Source="image/character_types/icCharaTypeBless.png"/>
                        <Span>Protection Unit</Span>

                        break;
                    }

                    case BattleUnit:
                    {
                        <Image Width="Width.Em(2)" Source="image/character_types/icCharaTypePc.png"/>
                        <Span>Battle Unit</Span>

                        break;
                    }
                }

                <Div Position="Position.Relative" Width="Width.Em(6)" Height="Height.Em(2)">
                    <Image Position="Position.Absolute" Width="Width.Em(2)"
                           Source="image/character_info/rarityStarOn.png" Style="z-index: 5"/>

                    <Image Position="Position.Absolute" Width="Width.Em(2)"
                           Source="image/character_info/rarityStarOn.png" Style="z-index: 4; left: 1em"/>

                    <Image Position="Position.Absolute" Width="Width.Em(2)"
                           Source="image/character_info/rarityStarOn.png" Style="z-index: 3; left: 2em"/>

                    @if (ViewModel.Unit.InitialRarity >= 4)
                    {
                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOn.png" Style="z-index: 2; left: 3em"/>
                    }
                    else
                    {
                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOff.png" Style="z-index: 2; left: 3em"/>
                    }

                    @if (ViewModel.Unit.InitialRarity >= 5)
                    {
                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOn.png" Style="z-index: 1; left: 4em"/>
                    }
                    else
                    {
                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOff.png" Style="z-index: 1; left: 4em"/>
                    }
                </Div>
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <Div Flex="Flex.JustifyContent.Center.AlignContent.Center">
                <Image Source="@ViewModel.Unit.Image" Fluid/>
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <Div Display="Display.None.Block.OnDesktop">
                <Div TextWeight="TextWeight.SemiBold" TextAlignment="TextAlignment.Center">[ @ViewModel.Unit.Title ]</Div>
                <Div TextWeight="TextWeight.SemiBold" TextAlignment="TextAlignment.Center">@ViewModel.Unit.Name</Div>

                <Div Position="Position.Relative.Start.Is50.Translate.MiddleX" Style="width: fit-content"
                     Flex="Flex.AlignItems.Center" Gap="Gap.Is1" Padding="Padding.Is2.FromTop">
                    @switch (ViewModel.Unit)
                    {
                        case ProtectionUnit:
                        {
                            <Image Width="Width.Em(2)" Source="image/character_types/icCharaTypeBless.png"/>
                            <Span>Protection Unit</Span>

                            break;
                        }

                        case BattleUnit:
                        {
                            <Image Width="Width.Em(2)" Source="image/character_types/icCharaTypePc.png"/>
                            <Span>Battle Unit</Span>

                            break;
                        }
                    }

                    <Div Position="Position.Relative" Width="Width.Em(6)" Height="Height.Em(2)">
                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOn.png" Style="z-index: 5"/>

                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOn.png" Style="z-index: 4; left: 1em"/>

                        <Image Position="Position.Absolute" Width="Width.Em(2)"
                               Source="image/character_info/rarityStarOn.png" Style="z-index: 3; left: 2em"/>

                        @if (ViewModel.Unit.InitialRarity >= 4)
                        {
                            <Image Position="Position.Absolute" Width="Width.Em(2)"
                                   Source="image/character_info/rarityStarOn.png" Style="z-index: 2; left: 3em"/>
                        }
                        else
                        {
                            <Image Position="Position.Absolute" Width="Width.Em(2)"
                                   Source="image/character_info/rarityStarOff.png" Style="z-index: 2; left: 3em"/>
                        }

                        @if (ViewModel.Unit.InitialRarity >= 5)
                        {
                            <Image Position="Position.Absolute" Width="Width.Em(2)"
                                   Source="image/character_info/rarityStarOn.png" Style="z-index: 1; left: 4em"/>
                        }
                        else
                        {
                            <Image Position="Position.Absolute" Width="Width.Em(2)"
                                   Source="image/character_info/rarityStarOff.png" Style="z-index: 1; left: 4em"/>
                        }
                    </Div>
                </Div>
            </Div>

            <Grid>
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile">
                    <TextDivider Text="STATS" Margin="Margin.Is2.OnY"/>

                    <Table Background="Background.Body">
                        <TableBody>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(2)" Height="Height.Em(2)">
                                        <Image Width="Width.Max100" Height="Height.Is100"
                                               Source="image/character_info/icHp.png" Text="Hp"/>
                                    </Div>
                                    <Div>Health</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center" Style="min-width: 5ch">
                                    @ViewModel.Unit?.MaxHealth
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(2)" Height="Height.Em(2)">
                                        <Image Width="Width.Max100" Height="Height.Is100"
                                               Source="image/character_info/icAtk.png" Text="Atk"/>
                                    </Div>
                                    <Div>Attack</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center">
                                    @ViewModel.Unit?.MaxAttack
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(2)" Height="Height.Em(2)">
                                        <Image Width="Width.Max100" Height="Height.Is100"
                                               Source="image/character_info/icDef.png" Text="Def"/>
                                    </Div>
                                    <Div>Defense</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center">
                                    @ViewModel.Unit?.MaxDefense
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(2)" Height="Height.Em(2)">
                                        <Image Width="Width.Max100" Height="Height.Is100"
                                               Source="image/character_info/icConstruct.png" Text="Output"/>
                                    </Div>
                                    <Div>Output</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center">
                                    @ViewModel.Unit?.MaxOutput
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div>Character Type</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              ColumnSpan="2">
                                    @ViewModel.Unit?.CharacterType
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div>Tactics Type</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center">
                                    <Image Source="@ViewModel.GetTacticTypeImage()"
                                           Text="@ViewModel.Unit.TacticsType"
                                           Height="Height.Em(1.5)"/>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Primary" TextColor="TextColor.Body"
                                                 Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Div Width="Width.Em(2)" Height="Height.Em(2)">
                                        <Icon IconSize="IconSize.x2" Name="IconName.Clock"/>
                                    </Div>
                                    <Div>Release</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center">
                                    @ViewModel.Unit?.ReleaseDate
                                </TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </Column>

                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile">
                    <TextDivider Text="FORCES" Margin="Margin.Is2.OnY"/>

                    <Div Background="Background.Body" Padding="Padding.Is2" Flex="Flex.Column.OnDesktop.Wrap"
                         Gap="Gap.Is2">
                        @switch (ViewModel.Unit)
                        {
                            case ProtectionUnit { Forces: not null } protectionUnit:
                            {
                                foreach (var force in protectionUnit.Forces)
                                {
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Image Width="Width.Em(2)" Height="Height.Em(2)"
                                               Source="@ViewModel.GetForceIcon(force)" Text="Icon"/>
                                        <Div>@force</Div>
                                    </Div>
                                }

                                break;
                            }

                            case BattleUnit battleUnit:
                            {
                                foreach (var force in battleUnit.Forces)
                                {
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Image Width="Width.Em(2)" Height="Height.Em(2)"
                                               Source="@ViewModel.GetForceIcon(force)" Text="Icon"/>
                                        <Div>@force</Div>
                                    </Div>
                                }

                                break;
                            }

                            default:
                            {
                                <Div Flex="Flex.Grow.Is1.Shrink.Is1" TextAlignment="TextAlignment.Center">
                                    No forces have been assigned.
                                </Div>

                                break;
                            }
                        }
                    </Div>

                    <TextDivider Text="SUITED FACILITIES" Margin="Margin.Is2.OnY"/>

                    <Div Background="Background.Body" Padding="Padding.Is2" Flex="Flex.Column" Gap="Gap.Is2">
                        @if (ViewModel.Unit.SuitedFacilities.Length == 0)
                        {
                            <Div>No Suited Facilities have been assigned.</Div>
                        }
                        else
                        {
                            if (ViewModel.Unit.SuitedFacilities.Length >= 1)
                            {
                                <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2" @key="@ViewModel.Unit.SuitedFacilities[0]">
                                    <Div>@ViewModel.Unit.SuitedFacilities[0]</Div>

                                    @switch (ViewModel.Unit)
                                    {
                                        case ProtectionUnit:
                                        {
                                            <Div>200%</Div>
                                            break;
                                        }

                                        case BattleUnit:
                                        {
                                            <Div>30%</Div>
                                            break;
                                        }
                                    }
                                </Div>
                            }

                            if (ViewModel.Unit.SuitedFacilities.Length >= 2)
                            {
                                <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2" @key="@ViewModel.Unit.SuitedFacilities[1]">
                                    <Div>@ViewModel.Unit.SuitedFacilities[1]</Div>

                                    @switch (ViewModel.Unit)
                                    {
                                        case ProtectionUnit:
                                        {
                                            <Div>100%</Div>
                                            break;
                                        }

                                        case BattleUnit:
                                        {
                                            <Div>10%</Div>
                                            break;
                                        }
                                    }
                                </Div>
                            }
                        }
                    </Div>
                </Column>
            </Grid>

            <TextDivider Text="TAGS" Margin="Margin.Is2.OnY"/>

            <Div Background="Background.Body" Padding="Padding.Is2" Flex="Flex.Wrap" Gap="Gap.Is2">
                There is something here.
            </Div>
        </Column>
    </Grid>

    @if (ViewModel.Unit is ProtectionUnit)
    {
        <Grid>
            <Column ColumnSize="ColumnSize.IsFull">
                <TextDivider Text="DIVINE PROTECTION" Margin="Margin.Is2.OnY"/>
            </Column>
        </Grid>
    }
}

@code
{
    [Parameter]
    [EditorRequired]
    public required string Permalink { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = ActivatorUtilities.CreateInstance<CharacterDetailViewModel>(ServiceProvider, Permalink);
        base.OnInitialized();
    }
}
