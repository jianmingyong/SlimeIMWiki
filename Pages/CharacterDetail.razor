@page "/characters/{permalink}"
@using SlimeIMWiki.Components.CharacterDetail
@using SlimeIMWiki.ViewModels.CharacterDetail
@inherits ReactiveComponentBase<SlimeIMWiki.ViewModels.CharacterDetail.CharacterDetailViewModel>
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime

@{ Debug.Assert(ViewModel != null, nameof(ViewModel) + " != null"); }

@if (ViewModel.Unit is null)
{
    <Div>There is no such character. Perhaps you have spelled incorrectly?</Div>
}
else
{
    <Grid>
        <Column ColumnSize="ColumnSize.Is12" Display="Display.None.OnDesktop">
            <Div Flex="Flex.Column" Position="Position.Relative">
                <Image Position="Position.Absolute.Start.Is0.Top.Is0"
                       Width="Width.Rem(4)" Height="Height.Rem(4)"
                       Source="image/character_info/btnReturnNormal.png"
                       Text="Back"
                       Class="returnButton"
                       @onclick="ReturnBack"/>

                @if (ViewModel.Unit is ProtectionUnit protectionUnit)
                {
                    <ProtectionUnitName Unit="protectionUnit"/>
                }
                else if (ViewModel.Unit is BattleUnit battleUnit)
                {
                    <BattleUnitName Unit="battleUnit"/>
                }
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <Image Width="Width.Rem(4)" Height="Height.Rem(4)"
                   Display="Display.None.Block.OnDesktop"
                   Source="image/character_info/btnReturnNormal.png"
                   Text="Back"
                   Class="returnButton"
                   @onclick="ReturnBack"/>

            <Div Flex="Flex.JustifyContent.Center.AlignItems.Center">
                <Image Source="@ViewModel.Unit.Image" Fluid/>
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
            <Div Display="Display.None.Flex.Column.OnDesktop">
                @if (ViewModel.Unit is ProtectionUnit protectionUnit)
                {
                    <ProtectionUnitName Unit="protectionUnit"/>
                }
                else if (ViewModel.Unit is BattleUnit battleUnit)
                {
                    <BattleUnitName Unit="battleUnit"/>
                }
            </Div>

            <Grid>
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile">
                    <TextDivider Text="STATS" Margin="Margin.Is2.OnY"/>

                    <Table Background="Background.Body">
                        <TableBody>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(1)"
                                             Height="Height.Em(1)">
                                            <Image Width="Width.Max100" Height="Height.Is100"
                                                   Source="image/character_info/icHp.png" Text="Hp"/>
                                        </Div>
                                        <Text>Health</Text>
                                    </Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Body" TextColor="TextColor.Body"
                                              Style="min-width: 5ch"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.MaxHealth</Div>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(1)"
                                             Height="Height.Em(1)">
                                            <Image Width="Width.Max100" Height="Height.Is100"
                                                   Source="image/character_info/icAtk.png" Text="Atk"/>
                                        </Div>
                                        <Div>Attack</Div>
                                    </Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              Style="min-width: 5ch"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.MaxAttack</Div>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(1)"
                                             Height="Height.Em(1)">
                                            <Image Width="Width.Max100" Height="Height.Is100"
                                                   Source="image/character_info/icDef.png" Text="Def"/>
                                        </Div>
                                        <Div>Defense</Div>
                                    </Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.MaxDefense</Div>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(1)"
                                             Height="Height.Em(1)">
                                            <Image Width="Width.Max100" Height="Height.Is100"
                                                   Source="image/character_info/icConstruct.png" Text="Output"/>
                                        </Div>
                                        <Div>Output</Div>
                                    </Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.MaxOutput</Div>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>Character Type</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.CharacterType</Div>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>Tactics Type</Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Image Source="@ViewModel.GetTacticTypeImage()"
                                           Text="@ViewModel.Unit.TacticsType"
                                           Height="Height.Em(1.5)"/>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableHeaderCell Background="Background.Body" TextColor="TextColor.Body"
                                                 VerticalAlignment="VerticalAlignment.Middle">
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Div Flex="Flex.JustifyContent.Center" Width="Width.Em(1)"
                                             Height="Height.Em(1)">
                                            <Icon Name="IconName.Clock"/>
                                        </Div>
                                        <Div>Release</Div>
                                    </Div>
                                </TableHeaderCell>
                                <TableRowCell Background="Background.Dark" TextColor="TextColor.Body"
                                              TextAlignment="TextAlignment.Center"
                                              VerticalAlignment="VerticalAlignment.Middle">
                                    <Div>@ViewModel.Unit?.ReleaseDate</Div>
                                </TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </Column>

                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile">
                    <TextDivider Text="FORCES" Margin="Margin.Is2.OnY"/>

                    <Div Background="Background.Body" Padding="Padding.Is2" Flex="Flex.Column.OnDesktop.Wrap"
                         Gap="Gap.Is2">
                        @switch (ViewModel.Unit)
                        {
                            case ProtectionUnit { Forces: not null } protectionUnit:
                            {
                                foreach (var force in protectionUnit.Forces)
                                {
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Image Width="Width.Em(1.5)" Height="Height.Em(1.5)"
                                               Source="@ViewModel.GetForceIcon(force)" Text="Icon"/>
                                        <Div>@force</Div>
                                    </Div>
                                }

                                break;
                            }

                            case BattleUnit battleUnit:
                            {
                                foreach (var force in battleUnit.Forces)
                                {
                                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                        <Image Width="Width.Em(1.5)" Height="Height.Em(1.5)"
                                               Source="@ViewModel.GetForceIcon(force)" Text="Icon"/>
                                        <Div>@force</Div>
                                    </Div>
                                }

                                break;
                            }

                            default:
                            {
                                <Div Flex="Flex.Grow.Is1.Shrink.Is1" TextAlignment="TextAlignment.Center">
                                    No forces have been assigned.
                                </Div>

                                break;
                            }
                        }
                    </Div>

                    <TextDivider Text="SUITED FACILITIES" Margin="Margin.Is2.OnY"/>

                    <Div Background="Background.Body" Padding="Padding.Is2" Flex="Flex.Column" Gap="Gap.Is2">
                        @if (ViewModel.Unit.SuitedFacilities.Length == 0)
                        {
                            <Div>No Suited Facilities have been assigned.</Div>
                        }
                        else
                        {
                            if (ViewModel.Unit.SuitedFacilities.Length >= 1)
                            {
                                <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Image Width="Width.Em(1.5)" Height="Height.Em(1.5)"
                                           Source="@ViewModel.GetFieldBuildingIcon(ViewModel.Unit.SuitedFacilities[0])"
                                           Text="Icon"/>
                                    <Div Flex="Flex.Grow.Is1">@ViewModel.Unit.SuitedFacilities[0]</Div>

                                    @switch (ViewModel.Unit)
                                    {
                                        case ProtectionUnit:
                                        {
                                            <Div>200%</Div>
                                            break;
                                        }

                                        case BattleUnit:
                                        {
                                            <Div>30%</Div>
                                            break;
                                        }
                                    }
                                </Div>
                            }

                            if (ViewModel.Unit.SuitedFacilities.Length >= 2)
                            {
                                <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                                    <Image Width="Width.Em(1.5)" Height="Height.Em(1.5)"
                                           Source="@ViewModel.GetFieldBuildingIcon(ViewModel.Unit.SuitedFacilities[1])"
                                           Text="Icon"/>
                                    <Div Flex="Flex.Grow.Is1">@ViewModel.Unit.SuitedFacilities[1]</Div>

                                    @switch (ViewModel.Unit)
                                    {
                                        case ProtectionUnit:
                                        {
                                            <Div>100%</Div>
                                            break;
                                        }

                                        case BattleUnit:
                                        {
                                            <Div>10%</Div>
                                            break;
                                        }
                                    }
                                </Div>
                            }
                        }
                    </Div>
                </Column>
            </Grid>

            @if (ViewModel.Unit is ProtectionUnit unit)
            {
                <TextDivider Text="DIVINE PROTECTION" Margin="Margin.Is2.OnY"/>

                <Div Flex="Flex.Column" Background="Background.Body" Padding="Padding.Is2" Gap="Gap.Is2">
                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                        <Div Background="@(new Background("body-secondary"))" Border="Border.RoundedCircle"
                             Width="Width.Em(4)" Height="Height.Em(4)">
                            <Image Source="image/character_info/blessConfirmIcon.png" Width="Width.Is100" Text="Icon"/>
                        </Div>
                        <Div>
                            <Div TextWeight="TextWeight.Bold">
                                @(string.IsNullOrEmpty(unit.DivineProtectionName) ? "???" : unit.DivineProtectionName)
                            </Div>
                            <Div TextSize="TextSize.ExtraSmall">Lv. Max</Div>
                        </Div>
                    </Div>

                    <Div>
                        @foreach (var line in unit.DivineProtectionEffectMax.Split('\n'))
                        {
                            <Div>@line</Div>
                        }
                    </Div>

                    <Div Background="@(new Background("body-secondary"))" TextWeight="TextWeight.Bold"
                         Padding="Padding.Is2" TextAlignment="TextAlignment.Center" TextSize="TextSize.ExtraSmall">
                        Supporting Divine Protection
                    </Div>

                    <Div>
                        @(string.IsNullOrEmpty(unit.SupportDivineProtectionEffectMax) ? "???" : unit.SupportDivineProtectionEffectMax)
                    </Div>
                </Div>

                <TextDivider Text="PROTECTION SKILL" Margin="Margin.Is2.OnY"/>

                <Div Flex="Flex.Column" Background="Background.Body" Padding="Padding.Is2" Gap="Gap.Is2">
                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                        <Div Background="@(new Background("body-secondary"))" Border="Border.RoundedCircle"
                             Width="Width.Em(4)" Height="Height.Em(4)">
                            @if (!string.IsNullOrEmpty(unit.ProtectionSkillIcon))
                            {
                                <Image Source="@unit.ProtectionSkillIcon" Width="Width.Is100" Text="Icon"/>
                            }
                        </Div>
                        <Div>
                            <Div TextWeight="TextWeight.Bold">
                                @(string.IsNullOrEmpty(unit.ProtectionSkillName) ? "???" : unit.ProtectionSkillName)
                            </Div>
                            <Div TextSize="TextSize.ExtraSmall">Lv. Max</Div>
                        </Div>
                    </Div>

                    <Div>
                        @foreach (var line in unit.ProtectionSkillEffect.Split('\n'))
                        {
                            <Div>@line</Div>
                        }
                    </Div>
                </Div>
            }

            <TextDivider Text="TRAIT" Margin="Margin.Is2.OnY"/>

            <Div Flex="Flex.Column" Background="Background.Body" Padding="Padding.Is2" Gap="Gap.Is2">
                <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                    <Div Background="@(new Background("body-secondary"))" Border="Border.RoundedCircle"
                         Width="Width.Em(4)" Height="Height.Em(4)">
                        @if (!string.IsNullOrEmpty(ViewModel.Unit.TraitOneIcon))
                        {
                            <Image Source="@ViewModel.Unit.TraitOneIcon" Width="Width.Is100" Text="Icon"/>
                        }
                    </Div>
                    <Div>
                        <Div TextWeight="TextWeight.Bold">
                            @(string.IsNullOrEmpty(ViewModel.Unit.TraitOneName) ? "???" : ViewModel.Unit.TraitOneName)
                        </Div>
                        <Div TextSize="TextSize.ExtraSmall">At 3rd Awaken</Div>
                    </Div>
                </Div>

                <Div>
                    @foreach (var line in ViewModel.Unit.TraitOneEffectMax.Split('\n'))
                    {
                        <Div>@line</Div>
                    }
                </Div>
            </Div>

            @if (ViewModel.Unit is BattleUnit { TraitTwoName: not null, TraitTwoEffectMax: not null } battleUnit)
            {
                <TextDivider Text="TRAIT 2" Margin="Margin.Is2.OnY"/>

                <Div Flex="Flex.Column" Background="Background.Body" Padding="Padding.Is2" Gap="Gap.Is2">
                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                        <Div Background="@(new Background("body-secondary"))" Border="Border.RoundedCircle"
                             Width="Width.Em(4)" Height="Height.Em(4)">
                            @if (!string.IsNullOrEmpty(battleUnit.TraitTwoIcon))
                            {
                                <Image Source="@battleUnit.TraitTwoIcon" Width="Width.Is100" Text="Icon"/>
                            }
                        </Div>
                        <Div>
                            <Div TextWeight="TextWeight.Bold">
                                @(string.IsNullOrEmpty(battleUnit.TraitTwoName) ? "???" : battleUnit.TraitTwoName)
                            </Div>
                            <Div TextSize="TextSize.ExtraSmall">At 5th Awaken</Div>
                        </Div>
                    </Div>

                    <Div>
                        @foreach (var line in battleUnit.TraitTwoEffectMax.Split('\n'))
                        {
                            <Div>@line</Div>
                        }
                    </Div>
                </Div>
            }

            @if (ViewModel.Unit.ValorTraitName is not null && ViewModel.Unit.ValorTraitEffect is not null && ViewModel.Unit.ValorTraitEffectMax is not null)
            {
                <TextDivider Text="VALOR TRAIT" Margin="Margin.Is2.OnY"/>

                <Div Flex="Flex.Column" Background="Background.Body" Padding="Padding.Is2" Gap="Gap.Is2">
                    <Div Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2">
                        <Div Background="@(new Background("body-secondary"))" Border="Border.RoundedCircle"
                             Width="Width.Em(4)" Height="Height.Em(4)">
                            @if (!string.IsNullOrEmpty(ViewModel.Unit.TraitOneIcon))
                            {
                                <Image Source="@ViewModel.Unit.ValorTraitIcon" Width="Width.Is100" Text="Icon"/>
                            }
                        </Div>
                        <Div>
                            <Div TextWeight="TextWeight.Bold">
                                @(string.IsNullOrEmpty(ViewModel.Unit.ValorTraitName) ? "???" : ViewModel.Unit.ValorTraitName)
                            </Div>
                            <Div TextSize="TextSize.ExtraSmall">At 2nd Awaken</Div>
                        </Div>
                    </Div>

                    <Div>
                        @foreach (var line in ViewModel.Unit.ValorTraitEffectMax.Split('\n'))
                        {
                            <Div>@line</Div>
                        }
                    </Div>
                </Div>
            }
        </Column>
    </Grid>
}

@code
{
    [Parameter]
    [EditorRequired]
    public required string Permalink { get; set; }
    
    protected override void OnInitialized()
    {
        ViewModel = ActivatorUtilities.CreateInstance<CharacterDetailViewModel>(ServiceProvider, Permalink);
        base.OnInitialized();
    }

    private async Task ReturnBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
