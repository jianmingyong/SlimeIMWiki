@page "/characters"

@inject DataModel DataModel
@inject IJSRuntime JsRuntime

<Alert Color="Color.Danger" Visible="true">
    <AlertDescription>
        Please be aware that some characters may contain outdated information.
    </AlertDescription>
</Alert>

<Divider DividerType="DividerType.TextContent" Text="Filters" Margin="Margin.Is4.OnY"/>

<Div>Something here</Div>

<Divider DividerType="DividerType.TextContent" Text="Characters" Margin="Margin.Is4.OnY"/>

<Div Flex="Flex.Wrap.AlignContent.Start" Gap="Gap.Is3.OnX.Is5.OnY" Padding="Padding.Is5.FromTop">
    @foreach (var unit in DataModel.BattleUnits)
    {
        <BattleUnit @key="unit.Permalink"
                    Unit="unit"
                    BattleAttributes="DataModel.BattleAttributes"
                    BattleAttackTypes="DataModel.BattleAttackTypes"></BattleUnit>
    }

    @foreach (var unit in DataModel.ProtectionUnits)
    {
        <ProtectionUnit @key="unit.Permalink"
                        Unit="unit"
                        Forces="DataModel.Forces"
                        ProtectionAttributes="DataModel.ProtectionAttributes"
                        ProtectionAttackTypes="DataModel.ProtectionAttackTypes"></ProtectionUnit>
    }
</Div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        await DataModel.LoadDataModelAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("updateUnitIcons");
    }
}
