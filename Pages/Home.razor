@page "/"

@implements IDisposable

@inject HttpClient HttpClient
@inject IMemoryCache MemoryCache

<CustomDivider Text="ABOUT" Margin="Margin.Is2.OnY"/>

<Div Background="Background.Body" Border="Border.Primary.OnAll.Rounded" Padding="Padding.Is3">
    SLIMEIM.WIKI is a Database for SLIME - Isekai Memories, the That Time I Got Reincarnated as a Slime mobile game
    developed by WFS and published by Bandai Namco Entertainment.
</Div>

<CustomDivider Text="TIMERS" Margin="Margin.Is2.FromTop.Is4.FromBottom"/>

<Div Background="Background.Body" Border="Border.Primary.OnAll.Rounded" Padding="Padding.Is3"
     Position="Position.Relative">
    <Buttons Position="Position.Absolute.Start.Is50.Top.Is0.Translate.Middle">
        <Button Size="Size.Small"
                Color="@(TimerSelection == "NA" ? Color.Light : Color.Dark)"
                Clicked="TimerNaClicked">
            <Div Padding="Padding.Is3.OnX">NA</Div>
        </Button>
        <Button Size="Size.Small"
                Color="@(TimerSelection == "EU" ? Color.Light : Color.Dark)"
                Clicked="TimerEuClicked">
            <Div Padding="Padding.Is3.OnX">EU</Div>
        </Button>
        <Button Size="Size.Small"
                Color="@(TimerSelection == "Asia" ? Color.Light : Color.Dark)"
                Clicked="TimerAsiaClicked">
            <Div Padding="Padding.Is3.OnX">Asia</Div>
        </Button>
    </Buttons>
    <Grid>
        <Column ColumnSize="ColumnSize.Is6">
            <Div TextAlignment="TextAlignment.Center">Reset</Div>
            <Div TextAlignment="TextAlignment.Center"
                 TextSize="TextSize.ExtraSmall">@TimerReset.ToString("F")</Div>
            <Div TextAlignment="TextAlignment.Center"
                 TextSize="TextSize.Heading2">@TimerResetIn.ToString(@"hh\:mm\:ss")</Div>
        </Column>
        <Column ColumnSize="ColumnSize.Is6">
            <Div TextAlignment="TextAlignment.Center">Update</Div>
            <Div TextAlignment="TextAlignment.Center"
                 TextSize="TextSize.ExtraSmall">@TimerUpdate.ToString("F")</Div>
            <Div TextAlignment="TextAlignment.Center"
                 TextSize="TextSize.Heading2">@TimerUpdateIn.ToString(@"hh\:mm\:ss")</Div>
        </Column>
    </Grid>
</Div>

<CustomDivider Text="LATEST" Margin="Margin.Is2.FromTop.Is4.FromBottom"/>

<Div Background="Background.Body" Border="Border.Primary.OnAll.Rounded"
     Padding="Padding.Is3.OnX.Is3.FromBottom.Is4.FromTop" Position="Position.Relative">
    <Buttons Position="Position.Absolute.Start.Is50.Top.Is0.Translate.Middle">
        <Button Size="Size.Small"
                Color="@(RegionSelection == "NA" ? Color.Light : Color.Dark)"
                Clicked="RegionNaClicked">
            <Div Padding="Padding.Is3.OnX">NA</Div>
        </Button>
        <Button Size="Size.Small"
                Color="@(RegionSelection == "EU" ? Color.Light : Color.Dark)"
                Clicked="RegionEuClicked">
            <Div Padding="Padding.Is3.OnX">EU</Div>
        </Button>
        <Button Size="Size.Small"
                Color="@(RegionSelection == "Asia" ? Color.Light : Color.Dark)"
                Clicked="RegionAsiaClicked">
            <Div Padding="Padding.Is3.OnX">Asia</Div>
        </Button>
        <Button Size="Size.Small"
                Color="@(RegionSelection == "Japan" ? Color.Light : Color.Dark)"
                Clicked="RegionJapanClicked">
            <Div Padding="Padding.Is3.OnX">Japan</Div>
        </Button>
    </Buttons>

    <iframe height="500"
            src="https://api.ten-sura-m.wfs.games/web/announcement?region=@RegionCode&language=@(RegionSelection == "Japan" ? "1" : "2")&phoneType=1"
            referrerpolicy="strict-origin-when-cross-origin"
            style="width: 100%; background-color: black"></iframe>
</Div>

<CustomDivider Text="RECENT LIVESTREAM" Margin="Margin.Is2"/>

<Div Background="Background.Body" Border="Border.Primary.OnAll.Rounded" Padding="Padding.Is3">
    @if (LiveStreamSrc is null)
    {
        <Div TextSize="TextSize.Heading3" TextAlignment="TextAlignment.Center">
            No Stream Available
        </Div>
    }
    else
    {
        <iframe width="640" height="480" src="@LiveStreamSrc"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin" allowfullscreen
                style="aspect-ratio: 16 / 9; width: 100%; height: 100%; max-width: 640px; max-height: 480px; position: relative; left: 50%; transform: translateX(-50%)"></iframe>
    }
</Div>

@code
{
    private string? TimerSelection { get; set; }

    private DateTime TimerReset { get; set; } = DateTime.Now;

    private DateTime TimerUpdate { get; set; } = DateTime.Now;

    private TimeSpan TimerResetIn { get; set; } = TimeSpan.Zero;

    private TimeSpan TimerUpdateIn { get; set; } = TimeSpan.Zero;

    private string? LiveStreamSrc { get; set; }

    private string? RegionSelection { get; set; }

    private int RegionCode { get; set; }

    private Timer? Timer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Timer = new Timer(TimerTicked, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        var liveStream = await MemoryCache.GetOrCreateAsync(nameof(Livestream), async entry =>
        {
            entry.SetAbsoluteExpiration(TimeSpan.FromHours(1));
            return await HttpClient.GetFromJsonAsync<Livestream>("data/livestream.json", JsonSerializer.Custom.Livestream);
        });

        LiveStreamSrc = liveStream?.YoutubeLink;

        TimerNaClicked();
        RegionNaClicked();
    }

    private void TimerNaClicked()
    {
        TimerSelection = "NA";
        TimerReset = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 19, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;
        TimerUpdate = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 10, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;

        if (TimerReset - DateTime.Now < TimeSpan.Zero)
        {
            TimerReset = TimerReset.AddDays(1);
        }

        if (TimerUpdate - DateTime.Now < TimeSpan.Zero)
        {
            TimerUpdate = TimerUpdate.AddDays(1);
        }

        TimerResetIn = TimerReset - DateTime.Now;
        TimerUpdateIn = TimerUpdate - DateTime.Now;
    }

    private void TimerEuClicked()
    {
        TimerSelection = "EU";
        TimerReset = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 12, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;
        TimerUpdate = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 10, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;

        if (TimerReset - DateTime.Now < TimeSpan.Zero)
        {
            TimerReset = TimerReset.AddDays(1);
        }

        if (TimerUpdate - DateTime.Now < TimeSpan.Zero)
        {
            TimerUpdate = TimerUpdate.AddDays(1);
        }

        TimerResetIn = TimerReset - DateTime.Now;
        TimerUpdateIn = TimerUpdate - DateTime.Now;
    }

    private void TimerAsiaClicked()
    {
        TimerSelection = "Asia";
        TimerReset = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 3, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;
        TimerUpdate = new DateTimeOffset(DateTimeOffset.UtcNow.Year, DateTimeOffset.UtcNow.Month, DateTimeOffset.UtcNow.Day, 10, 0, 0, TimeSpan.FromHours(8)).LocalDateTime;

        if (TimerReset - DateTime.Now < TimeSpan.Zero)
        {
            TimerReset = TimerReset.AddDays(1);
        }

        if (TimerUpdate - DateTime.Now < TimeSpan.Zero)
        {
            TimerUpdate = TimerUpdate.AddDays(1);
        }

        TimerResetIn = TimerReset - DateTime.Now;
        TimerUpdateIn = TimerUpdate - DateTime.Now;
    }

    private void RegionNaClicked()
    {
        RegionSelection = "NA";
        RegionCode = 3;
    }

    private void RegionEuClicked()
    {
        RegionSelection = "EU";
        RegionCode = 4;
    }

    private void RegionAsiaClicked()
    {
        RegionSelection = "Asia";
        RegionCode = 2;
    }

    private void RegionJapanClicked()
    {
        RegionSelection = "Japan";
        RegionCode = 1;
    }

    private void TimerTicked(object? state)
    {
        TimerResetIn = TimerReset - DateTime.Now;
        TimerUpdateIn = TimerUpdate - DateTime.Now;

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Timer?.Dispose();
    }
}
