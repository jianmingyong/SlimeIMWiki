@inherits ReactiveInjectableComponentBase<SlimeIMWiki.ViewModels.Characters.CharacterSectionViewModel>
@using ReactiveUI
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<CharacterSection> Logger

@{ Debug.Assert(ViewModel != null, nameof(ViewModel) + " != null"); }

<Div Flex="Flex.Wrap.JustifyContent.Between" Gap="Gap.Is2.OnY" Margin="Margin.Is2.FromBottom">
    <Div Flex="Flex.Row">
        <Buttons Border="Border.White">
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.DisplayCategory == "Battle" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsDisplayCategoryCommand"
                    CommandParameter="@("Battle")">
                <Image Source="image/character_types/icCharaTypePc.png" Width="Width.Em(1.5)" Height="Height.Em(1.5)"/>
                <Text Display="Display.None.Block.OnTablet">Battle Units</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.DisplayCategory == "Protection" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsDisplayCategoryCommand"
                    CommandParameter="@("Protection")">
                <Image Source="image/character_types/icCharaTypeBless.png" Width="Width.Em(1.5)" Height="Height.Em(1.5)"/>
                <Text Display="Display.None.Block.OnTablet">Protection Units</Text>
            </Button>
        </Buttons>
    </Div>
    
    <Div Flex="Flex.Row">
        <Buttons Border="Border.White">
            <Button Size="Size.Small" Color="Color.Dark" Command="ViewModel.ChangeCharacterUnitsOrderCommand">
                <Icon Name="@(ViewModel.IsOrderByDescending ? IconName.ChevronDown : IconName.ChevronUp)"/>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Release" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Release")">
                <Icon Name="IconName.Clock"/>
                <Text Display="Display.None.Block.OnTablet">Release</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Health" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Health")">
                <Image Height="Height.Em(1)" Source="image/character_info/icHp.png" Text="Hp"
                       Style="@(ViewModel.CharacterUnitsCategory == "Health" ? "filter: invert(100%)" : "filter: invert(0%)")"/>
                <Text Display="Display.None.Block.OnTablet">Health</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Attack" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Attack")">
                <Image Height="Height.Em(1)" Source="image/character_info/icAtk.png" Text="Atk"
                       Style="@(ViewModel.CharacterUnitsCategory == "Attack" ? "filter: invert(100%)" : "filter: invert(0%)")"/>
                <Text Display="Display.None.Block.OnTablet">Attack</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Defense" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Defense")">
                <Image Height="Height.Em(1)" Source="image/character_info/icDef.png" Text="Def"
                       Style="@(ViewModel.CharacterUnitsCategory == "Defense" ? "filter: invert(100%)" : "filter: invert(0%)")"/>
                <Text Display="Display.None.Block.OnTablet">Defense</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Rarity" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Rarity")">
                <Icon Name="IconName.Star"/>
                <Text Display="Display.None.Block.OnTablet">Rarity</Text>
            </Button>
            <Button Size="Size.Small" Flex="Flex.Row.AlignItems.Center" Gap="Gap.Is2"
                    Color="@(ViewModel.CharacterUnitsCategory == "Name" ? Color.Light : Color.Dark)"
                    Command="ViewModel.ChangeCharacterUnitsOrderByCategoryCommand"
                    CommandParameter="@("Name")">
                <Image Height="Height.Em(1)" Source="image/character_info/icPopulation.png" Text="Population"
                       Style="@(ViewModel.CharacterUnitsCategory == "Name" ? "filter: invert(100%)" : "filter: invert(0%)")"/>
                <Text Display="Display.None.Block.OnTablet">Name</Text>
            </Button>
        </Buttons>
    </Div>
</Div>

<Div Background="Background.Body" Position="Position.Relative" 
     Style="height: calc(100vh - 5.5rem); overflow-y: scroll"
     @onscroll="OnScrollAsync" ElementId="UnitScrollContainer">
    
    <Div Style="@($"height: calc({_unitContainerHeight}px + 1rem)")">
        <Div Flex="Flex.Wrap" Gap="Gap.Is3.OnX.Is5.OnY" Padding="Padding.Is5.FromTop.Is3.FromBottom"
             Position="Position.Absolute" Style="@($"top: {_startIndex / _itemsPerRow * (_itemHeight + _itemHeightGap)}px")">
            @foreach (var unit in ViewModel.CharacterUnits.Skip(_startIndex).Take(_endIndex - _startIndex))
            {
                if (unit is BattleUnit battleUnit)
                {
                    <BattleUnitIcon @key="unit.Permalink" Unit="battleUnit" DisplayText="@ViewModel.DisplayText(unit)"/>
                }
                else if (unit is ProtectionUnit protectionUnit)
                {
                    <ProtectionUnitIcon @key="unit.Permalink" Unit="protectionUnit" DisplayText="@ViewModel.DisplayText(unit)"/>
                }
            }
        </Div>
    </Div>
</Div>

@code
{
    private IJSObjectReference? _module;
    private int _renderedHashCode;

    private float _unitScrollContainerWidth;
    private float _unitScrollContainerHeight;
    private float _unitContainerHeight;
    private float _scrollPosition;

    private int _itemWidth = 100;
    private int _itemHeight = 100;
    private int _itemWidthGap = 16;
    private int _itemHeightGap = 48;
    private int _overscanRowCount = 2;
    private int _itemsPerRow = 1;
    private int _visibleRowCount = 1;

    private int _overscanAboveRowCount;
    private int _overscanBelowRowCount;

    private int _startIndex;
    private int _endIndex = 1;

    protected override bool ShouldRender()
    {
        var newRenderHashcode = HashCode.Combine(ViewModel, _unitContainerHeight, _startIndex, _endIndex);
        if (_renderedHashCode == newRenderHashcode) return false;
        _renderedHashCode = newRenderHashcode;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Characters/CharacterSection.razor.js");
            await OnScrollAsync();

#pragma warning disable CS8602 // Dereference of a possibly null reference.
            this.WhenAnyValue(section => section.ViewModel.CharacterUnitsCount).Subscribe(_ => UpdateVisibleItems());
#pragma warning restore CS8602 // Dereference of a possibly null reference.
        }

        if (!firstRender)
        {
            Logger.LogTrace("Component has re-render");
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnScrollAsync()
    {
        if (_module is null) return;

        _unitScrollContainerWidth = await _module.InvokeAsync<float>("getElementWidth", "UnitScrollContainer");
        _unitScrollContainerHeight = await _module.InvokeAsync<float>("getElementHeight", "UnitScrollContainer");
        _scrollPosition = await _module.InvokeAsync<float>("getScrollPosition", "UnitScrollContainer");

        Logger.LogTrace("Unit Container Size: {width}, {height}", _unitScrollContainerWidth, _unitScrollContainerHeight);
        Logger.LogTrace("Scroll Position: {position}", _scrollPosition);

        UpdateVisibleItems();
    }
    
    private void UpdateVisibleItems()
    {
        if (_module is null) return;
        
        Debug.Assert(ViewModel != null, nameof(ViewModel) + " != null");
        
        _itemsPerRow = (int) Math.Floor(_unitScrollContainerWidth / (_itemWidth + _itemWidthGap));
        _visibleRowCount = (int) Math.Ceiling(_unitScrollContainerHeight / (_itemHeight + _itemHeightGap));

        _overscanAboveRowCount = Math.Clamp((int) MathF.Floor(_scrollPosition / (_itemHeight + _itemHeightGap)), 0, _overscanRowCount);
        _overscanBelowRowCount = _overscanRowCount;
        
        _startIndex = (int) MathF.Floor(_scrollPosition / (_itemHeight + _itemHeightGap)) * _itemsPerRow - _itemsPerRow * _overscanAboveRowCount;
        _endIndex = _startIndex + _itemsPerRow * (_overscanAboveRowCount + _visibleRowCount + _overscanBelowRowCount);
        _endIndex = Math.Min(_endIndex, ViewModel.CharacterUnitsCount);

        _unitContainerHeight = MathF.Ceiling((float) ViewModel.CharacterUnitsCount / _itemsPerRow) * (_itemHeight + _itemHeightGap);
        
        Logger.LogTrace("Item Per Row: {itemsPerRow}", _itemsPerRow);
        Logger.LogTrace("Overscan Above Row Count: {renderedRowCount}", _overscanAboveRowCount);
        Logger.LogTrace("Overscan Below Row Count: {renderedRowCount}", _overscanBelowRowCount);
        Logger.LogTrace("Unit Count: {count}", ViewModel.CharacterUnitsCount);
        Logger.LogTrace("Index: {start} / {end}", _startIndex, _endIndex);

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null) await _module.DisposeAsync();
    }
}
