@using SlimeIMWiki.Components.Characters.Filters
@inherits ReactiveInjectableComponentBase<SlimeIMWiki.ViewModels.Characters.FilterSectionViewModel>

@{ Debug.Assert(ViewModel != null, nameof(ViewModel) + " != null"); }

<Div Flex="Flex.Wrap.JustifyContent.End.OnTablet.AlignContent.End.OnTablet" Width="Width.Is100" Padding="Padding.Is2.OnY">
    <Switch TValue="bool" @bind-Checked="ViewModel.IsOrFilter">OR Filters Toggle (Uncheck for AND Filters)</Switch>
</Div>

<Div Flex="Flex.Column" Gap="Gap.Is2" Background="Background.Body" Padding="Padding.Is2">
    <Div Flex="Flex.Wrap.JustifyContent.Center.AlignContent.Center" Gap="Gap.Is2">
        @foreach (var attackType in ViewModel.AttackTypes)
        {
            <AttackTypeFilter AttackType="attackType"/>
        }

        <Span>|</Span>

        @foreach (var attribute in ViewModel.Attributes)
        {
            <AttributeFilter Attribute="attribute"/>
        }
    </Div>

    <Div Flex="Flex.Wrap.JustifyContent.Center.AlignContent.Center" Gap="Gap.Is2">
        <InitialRarityFilter Rarity="3"/>

        <Span>|</Span>

        <InitialRarityFilter Rarity="4"/>

        <Span>|</Span>

        <InitialRarityFilter Rarity="5"/>
    </Div>
</Div>

<Div Flex="Flex.Wrap" Margin="Margin.Is2.OnY" Gap="Gap.Is2">
    @foreach (var filter in ViewModel.Filters)
    {
        @filter.RemoveRenderFragment
    }
</Div>
